<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drupal7 | J2hongming Blog]]></title>
  <link href="http://j2hongming.github.io/blog/categories/drupal7/atom.xml" rel="self"/>
  <link href="http://j2hongming.github.io/"/>
  <updated>2016-03-28T18:10:48+08:00</updated>
  <id>http://j2hongming.github.io/</id>
  <author>
    <name><![CDATA[HongMing ChangChine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batch API Notes]]></title>
    <link href="http://j2hongming.github.io/blog/2016/03/28/batch-api-notes/"/>
    <updated>2016-03-28T14:41:34+08:00</updated>
    <id>http://j2hongming.github.io/blog/2016/03/28/batch-api-notes</id>
    <content type="html"><![CDATA[<ul>
<li>設定operations</li>
<li>設定batch資訊</li>
<li>設定finish callback function</li>
<li>線上展示</li>
<li>其他批次處理可用模組</li>
</ul>


<!-- more -->


<blockquote><p>Batch sets are used to spread processing (primarily, but not exclusively, forms processing) over several page requests. This helps to ensure that the processing is not interrupted due to PHP timeouts, while users are still able to receive feedback on the progress of the ongoing operations.
<a href="https://api.drupal.org/api/drupal/includes%21form.inc/group/batch/7">Batch operations</a></p></blockquote>

<h2>設定operations</h2>

<p>可依照需求切割一個operation內做的事，假設1000個node，可以一個operation處理一個node或一個operation處理多個node。Client端利用ajax對<a href="https://sitename/batch?id=">https://sitename/batch?id=</a>[batch_id]&amp;op=do發出HttpRequest。</p>

<pre><code>// 假設$data是從EXCEL中讀出的資料

$split_rows = array_chunk($data, 50);

foreach ($split_rows as $key =&gt; $rows) {
  $operations[] = array(
    'import_batch_processing',  // The function to run on 50 row in one operation
    array($rows),  // The rows in the Excel
  );
}
</code></pre>

<h2>設定batch資訊</h2>

<pre><code>$batch = array(
  'title' =&gt; t('批次處理中...'),
  'operations' =&gt; $operations,  // Runs all of the queued processes from the while loop above.
  'file' =&gt; drupal_get_path('module', 'module_name_which_you_create') . '/import_batch_processing.inc',
  'finished' =&gt; 'import_batch_processing_finished', // Function to run when the import is successful
'error_message' =&gt; t('The installation has encountered an error.'),
'progress_message' =&gt; t('資料匯入中...'),
);
</code></pre>

<ul>
<li><code>file</code>: 若import_batch_processing和import_batch_processing_finished沒有定義在.module檔內，需設定有定義這兩個callback function的file</li>
<li><code>finished</code>: batch結束後須執行的callback function</li>
<li><code>error_message</code>:batch過程中若發生錯誤的回傳訊息</li>
<li><code>progress_message</code>: batch過程中顯示的訊息</li>
</ul>


<h2>設定finish callback function</h2>

<pre><code>function import_batch_processing_finished( $success, $results, $operations ){
if($success){
  ...
}
else {
  // An error occurred.
  // $operations contains the operations that remained unprocessed.
  $error_operation = reset($operations);
  drupal_set_message(
    t('An error occurred while processing @operation with arguments : @args',
      array(
        '@operation' =&gt; $error_operation[0],
        '@args' =&gt; print_r($error_operation[0], TRUE),
      )
    )
  );
}
</code></pre>

<h2>線上展示</h2>

<ol>
<li><a href="https://simplytest.me/">Evaluate Drupal projects online</a></li>
<li>安裝模組 Examples for Developers</li>
<li>登入admin帳號後，開啟模組Devel generate和Batch example</li>
<li>前往路徑 admin/config/development/generate/content，新增1000個測試Node</li>
<li>前往路徑 examples/batch_example，開始測試</li>
</ol>


<blockquote><p>可配合程式碼觀察
<a href="http://cgit.drupalcode.org/examples/tree/batch_example/batch_example.module?id=refs/heads;id2=7.x-1.x">Batch example source code</a></p></blockquote>

<h2>其他批次處理可用模組</h2>

<ul>
<li><a href="https://www.drupal.org/project/views_data_export">Views Data Export</a></li>
<li><a href="https://www.drupal.org/project/node_export">Node export</a></li>
</ul>


<h2>Ref.</h2>

<ul>
<li><a href="https://api.drupal.org/api/drupal/includes%21form.inc/group/batch/7">Batch operations</a></li>
<li><a href="https://www.drupal.org/node/180528">how to use the Batch API</a></li>
<li><a href="http://www.jeffgeerling.com/blogs/jeff-geerling/using-batch-api-build-huge-csv">Using Batch API to build huge CSV files for custom exports</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Access Data in Drupal 7]]></title>
    <link href="http://j2hongming.github.io/blog/2016/03/28/how-to-access-data-in-drupal-7/"/>
    <updated>2016-03-28T10:05:52+08:00</updated>
    <id>http://j2hongming.github.io/blog/2016/03/28/how-to-access-data-in-drupal-7</id>
    <content type="html"><![CDATA[<ul>
<li>Basic API</li>
<li>Database API

<ul>
<li>Dynamic Query</li>
<li>Static Query</li>
<li>Show Query String and Arguments</li>
</ul>
</li>
<li>EntityFieldQuery</li>
</ul>


<!-- more  -->


<h2>Basic API</h2>

<pre><code>node_load, user_load, taxonomy_term_load, comment_load
主要帶入參數為node id, user_id, term id, comment id
</code></pre>

<h2>Database API</h2>

<h3>Dynamic Query</h3>

<h4>db_select</h4>

<pre><code>$query = db_select('node', 'n');
// access node table, alias is n
</code></pre>

<h4>codition</h4>

<pre><code>$query-&gt;condition($field, $value = NULL, $operator = '=')
// 基本型態

$query-&gt;condition('node.type', array('node_type_name'),'IN');
// 使用In

$query-&gt;condition('node.title',  '%'.db_like($key_word).'%', 'LIKE');
// 使用Like

$query-&gt;where('now() &gt;  TIMESTAMPADD( DAY , 9, FROM_UNIXTIME( field_data_field_timefield.field_timefield_value  ) )');
// 使用where而非condition的寫法

$or = db_or();
$or-&gt;condition('node.title','%'.db_like($key_word).'%', 'LIKE');
$or-&gt;condition('comment.subject','%'.db_like($key_word).'%', 'LIKE');
$query-&gt;condition($or);
// 使用OR連接過濾條件
</code></pre>

<h4>fields, addField</h4>

<p>差別在於是否要使用欄位別名和一次可以存取的欄位數量
    $query->fields(&lsquo;node&rsquo;, array(&lsquo;nid&rsquo;, &lsquo;title&rsquo;));
    // 一次存取多個欄位但無法使用欄位別名</p>

<pre><code>$query-&gt;addField('node','title','node_title');
// 一次存取一個欄位，可以使用欄位別名
</code></pre>

<h4>addExpression</h4>

<pre><code>$query-&gt;addExpression('IFNULL(count1, 0)+IFNULL(count2, 0)','total_count');

$query-&gt;addExpression('SUM(clickCount)', 'total_count');
</code></pre>

<h4>join</h4>

<p>預設join的型態為inner join, 有提供<code>join()</code>, <code>innerJoin()</code>, <code>leftJoin()</code>, or <code>rightJoin()</code>的方法</p>

<pre><code>$query = db_select('node', 'n');
$table_alias = $query-&gt;join('users', 'u', 'n.uid = u.uid AND u.uid = :uid');
// node table join user talbe on uid
</code></pre>

<h4>SubQuery</h4>

<pre><code>$subquery_customlog = db_select('customlog', 'clg')-&gt;fields('clg', array('nid'));
$subquery_customlog-&gt;addExpression('COUNT(*)', 'count');
$subquery_customlog-&gt;groupBy('clg.nid');
$query = db_select('node','n')-&gt;fields('n', array('nid','title'));
$query-&gt;leftJoin( $subquery_customlog, 'c_count' ,'c_count.nid = n.nid');
...
// 自行產生所需的table後, 再Join到另一個table
</code></pre>

<h4>Extender</h4>

<p>tablesort和pager</p>

<pre><code>$query-&gt;extend('TableSort')
      -&gt;orderByHeader($header);
// Sorting Extender, 依照表格的Header排序

$query-&gt;extend('PagerDefault')
      -&gt;limit(10);
// Pager Extender
</code></pre>

<h3>Static Query</h3>

<pre><code>$result = db_query("SELECT nid, title FROM {node} WHERE type = :type", array( ':type' =&gt; 'page',));
</code></pre>

<h3>Show Query String and Arguments</h3>

<p>顯示Drupal產生的SQL子句和參數</p>

<pre><code>echo $query-&gt;__toString() . "\n";
// Get query string
$args = $query-&gt;getArguments();
var_dump($args);
// Get the arguments passed to the string
</code></pre>

<h2>EntityFieldQuery</h2>

<p>取得Entity相關的資料, 在Drupal中Entity指的是node, user, taxonomy term, comment&hellip;等。回傳值是和entity相關的ID值，必須另外使用entity_load讀取entity其他資料。</p>

<p>和Basic API相比，優勢在於能使用較複雜的過濾條件得到想要的entity資料；和Database API相比，優勢在於直接以entity觀點看資料，直覺性較強，有一個小缺點是EntityFieldQuery若要同時取得兩個entity的資訊，很難使用join的概念處理。</p>

<pre><code>$query = new EntityFieldQuery();

$query-&gt;entityCondition('entity_type', 'node')
      -&gt;entityCondition('bundle', 'article')
      -&gt;propertyCondition('status', NODE_PUBLISHED)
      -&gt;fieldCondition('field_news_types', 'value', 'spotlight', '=')
      -&gt;fieldCondition('field_news_publishdate', 'value', $year . '%', 'like')-&gt;fieldCondition('field_news_publishdate', 'value', $year . '%', 'like')
      -&gt;fieldOrderBy('field_photo', 'fid', 'DESC')
      -&gt;range(0, 10);

$result = $query-&gt;execute();

if (isset($result['node'])) {
  $news_items_nids = array_keys($result['node']);
  $news_items = entity_load('node', $news_items_nids);
}
</code></pre>

<h2>Ref.</h2>

<ul>
<li><a href="https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load/7">node_load</a></li>
<li><a href="https://api.drupal.org/api/drupal/modules%21user%21user.module/function/user_load/7">user_load</a></li>
<li><a href="https://api.drupal.org/api/drupal/modules%21taxonomy%21taxonomy.module/function/taxonomy_term_load/7">taxonomy_term_load</a></li>
<li><a href="https://api.drupal.org/api/drupal/modules%21comment%21comment.module/function/comment_load/7">comment_load</a></li>
<li><a href="https://www.drupal.org/dynamic-queries">Dynamic queries</a></li>
<li><a href="https://www.drupal.org/node/310072">Static queries</a></li>
<li><a href="https://www.drupal.org/node/1343708">How to use EntityFieldQuery</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal 7 + Memcached on CentOS 6]]></title>
    <link href="http://j2hongming.github.io/blog/2015/07/24/drupal-7-plus-memcached-on-centos-6/"/>
    <updated>2015-07-24T17:24:34+08:00</updated>
    <id>http://j2hongming.github.io/blog/2015/07/24/drupal-7-plus-memcached-on-centos-6</id>
    <content type="html"><![CDATA[<ul>
<li>安裝Memcached</li>
<li>設定Memcached</li>
<li>安裝Memcached PHP extension(PECL Memcache)</li>
<li>設定Memcached PHP extension</li>
<li>安裝Drupal 7 memcache 模組</li>
<li>設定Drupal 7 setting.php</li>
<li>注意事項</li>
</ul>


<!-- more -->


<h2>Memcached</h2>

<h3>安裝Memcached</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install memcached</span></code></pre></td></tr></table></div></figure></p>

<h3>設定Memcached</h3>

<p>設定 /etc/sysconfig/memcached
注意OPTIONS=&ldquo;-l 127.0.0.1&rdquo;</p>

<h2>Memcached PHP extension</h2>

<h3>安裝Memcached PHP extension</h3>

<p>指定版本
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pecl install channel://pecl.php.net/memcache-3.0.6</span></code></pre></td></tr></table></div></figure></p>

<h3>設定Memcached PHP extension</h3>

<p>設定/etc/php.d/memcache.ini</p>

<p>開啟hash相關設定
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>memcache.hash_strategy=consistent</span></code></pre></td></tr></table></div></figure></p>

<h2>Drupal 7</h2>

<h3>安裝Drupal 7 memcache 模組</h3>

<p><a href="https://www.drupal.org/project/memcache">Memcache API and Integration</a></p>

<h3>設定Drupal 7 setting.php</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$conf[&lsquo;cache_backends&rsquo;][] = &lsquo;sites/all/modules/memcache/memcache.inc&rsquo;;
</span><span class='line'>// The &lsquo;cache_form&rsquo; bin must be assigned no non-volatile storage.
</span><span class='line'>$conf[&lsquo;cache_class_cache_form&rsquo;] = &lsquo;DrupalDatabaseCache&rsquo;;
</span><span class='line'>$conf[&lsquo;cache_default_class&rsquo;] = &lsquo;MemCacheDrupal&rsquo;;
</span><span class='line'>$conf[&lsquo;memcache_key_prefix&rsquo;] = &lsquo;something_unique&rsquo;;
</span><span class='line'>// Don&rsquo;t bootstrap the database when serving pages from the cache.
</span><span class='line'>$conf[&lsquo;page_cache_without_database&rsquo;] = TRUE;
</span><span class='line'>$conf[&lsquo;page_cache_invoke_hooks&rsquo;] = FALSE;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$conf[&lsquo;memcache_stampede_protection&rsquo;] = TRUE;
</span><span class='line'>$conf[&lsquo;lock_inc&rsquo;] = &lsquo;sites/all/modules/memcache/memcache-lock.inc&rsquo;;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>注意事項</h2>

<ol>
<li>若memcache service有起來，Druapl卻沒連到，注意防火牆設定</li>
</ol>


<h2>Ref</h2>

<ul>
<li><a href="https://www.drupal.org/node/1131468">Drupal 7 Memcache Tutorial</a>
大致流程說明</li>
<li><a href="http://tag1consulting.com/blog/memcache-centos-fedora">Memcached and PECL memcache on CentOS and Fedora</a>
CentOS安裝注意事項</li>
<li><a href="http://www.tecmint.com/install-memcached-caching-server-on-rhel-centos-fedora/">Install Memcached (Caching Server) on RHEL/CentOS 6.3/5.8 and Fedora 17-12</a>
安裝流程與指令(推薦)</li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000845/ch16.html">Chapter 16. Alternative Storage and Cache Backends</a>
觀念</li>
<li><a href="http://www.hellosanta.com.tw/Drupal%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/drupal-memcached">Drupal Memcached中文教學</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
